// QUesto file ci permetterà di scrivere i nostri stili in una nuova sintass,
// la Syntactically Awesome Style Sheets (SASS)
// Vantaggi?

// 1) Maggiore organizzazione del codice
// 2) Mantanibilità dei nostri stili
// 3) Ridurre i dischi di duplicazione 


// Come si usa SASS?
// Scrivo gli stili in SASS -> LIVE SASS COMPILER trasformerà il SASS in CSS -> cliccando su Watch Sass in basso nell barra di stato [si creeranno due file un .css e un .map.css.

// Caratteristiche della sintassi SASS

// 1) E' possibile in ogni caso scrivere del normalissimo CSS.

body {
    margin: 0;
    padding: 0
}

// nav {
//     display: block
// }

// nav ul {
//     display: flex;
// }

// nav ul li {
//     font-size: 0.8em;
// }

// @media screen and (min-width:768px) {
//     nav ul {
//         flex-direction: column;
//     }
// }


// 2) Selettori annidati / nidificati 

nav {
    display: block;

    ul {
        display: flex;
        flex-direction: column;

        li {
            font-size: 0.8em
        }

        @media screen and (min-width:768px) {
            flex-direction: row;
        }

    }
}


// 3) Lavorare con le pseudoclassi -> l' &: serve per assegnare alle pseudoclassi della classe in cui ci troviamo delle regole.

.buttons {
    .primary {
        color: white;
        background-color: red;

        &:hover {
            background-color: purple;
        }

        &:visited,
        &:focus {
            background-color: violet;
        }
    }
}


// 4) Utilizzare un prefisso comune per proprietà dal nome simile

// p.first {
//     font-size: 1.1em;
//     font-weight: 400;
//     font-style: italic;
// }

p.first {
    font: {
        size: 1.1em;
        weight: 400;
        style: italic
    }
}


// 5) Variabili 
// Le variabili in sass servono per memorizzare dei valori e possono essere utilizzate solo dopo la loro dichiarazione.

$main-margin: 35px; // -> definizione della variabile
$primary-border: $main-margin solid black; // -> definizione di una variabile che ne utilizza un'altra come suo valore

h2 {
    margin: $main-margin; // -> chiamata della variabile
    border: $primary-border;
}


// es. di mappa di coppie chiave valore
$sizes: (
    xs:10px,
    sm:12px,
    md:16px,
    lg:24px,
    xl:36px
);


// SASS sa utilizzare anche operatori logici, di comparazione e matematici
// ==, !=, <, >, >=, <=
// + - / *


// 6) MIXINS
// un MIXIN è un blocco di regole css a cui abbiamo dato un nome

// Definizione di un mixin
@mixin customStyles() {
    color: chocolate;
    border: $primary-border;
    margin-left: $main-margin
}

// Utilizzo di un mixin -> @include
h3 {
    @include customStyles();
    padding: 10px;
}

// I mixin posso fare di più: -> si possono parametrizzare tramite variabili SASS con addirittura valori di default
@mixin customNav($myBackgrounf-color: white) {
    display: flex;
    flex-direction: row;

    @media screen and (min-width:768px) {
        flex-direction: column;
    }

    justify-content: space-around;
    background-color: $myBackgrounf-color
}

// Passo i parametri in base a cosa mi serve
.netFlix-navbar {
    @include customNav(red);
}

.spotify-navbar {
    @include customNav(green);
}


// 7/ Interpolazione

@mixin fontInterpolation($property, $value) {
    // questo mixin applicherà delle regole su una proprietà DINAMICA -> #{}
    font-#{$property}: $value;
}

.myclass1 {
    @include fontInterpolation("weight", 100)
}

.myclass2 {
    @include fontInterpolation("size", 5rem)
}


// 8) Cicli
// In SASS è possibile utilizzare dei cicli per AUTOMATIZZARE la generazione di STILI o addirittura di intere CLASSI.

$my-sizes: 10px, 14px, 18px; // -> inizializzazione di un array

@each $size in $my-sizes {
    // quello che verrà eseguito qui dentro ripetuto TRE volte
    // in cui ogni volta avete accesso al singolo elemento dell'array my-sizes
    // che verrà chiamato ("$size")


    // Con i selettori if si possono generare cose in base a delle condizioni
    @if $size < 15px {
        .pippo-#{$size} {
            margin: $size;
        }
    }

    @else {
        .ciao-#{$size} {
            margin: $size;
        }
    }

}


// Ciclo su mappa

$sizes-map: (
    xs:10px,
    sm:12px,
    medium:16px,
    lg:20px,
    xl:28px
);

@each $breakpoint, $value in $sizes-map {
    .margin-#{$breakpoint} {
        margin: 0 $value;
    }
}


// 9) PARTIALS
// Sass ci permette di lavorare su fogli separati scss, potenzialmente piccoli e ben distribuiti,
// in modo da potersi occupare separatamente di diverse porzioni di stile.

// Passiamo a style.css
